'''

Highly divisible triangular number
===========================

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

'''
from problem import Problem
from math import sqrt

class Pe012(Problem):
    def __init__(self):
        self.divs = {}

    def divisors(self, num):
        count = 1

        for i in range(num / 2, 0, -1):
            if num % i == 0:
                if num in self.divs:
                    count += self.divs[num]
                    break

                count += 1

        self.divs[num] = count
        print 'x', self.divs

        return count

    def execute(self):
        num = 0
        divs = []

        highest = (0,0,0)

        for i in range(1, 10):
            num = i

            divs = self.divisors(num)

            if divs > highest[2]:
                highest = (i, num, divs)
                print highest

            if divs >= 500:
                return str(('v', i, num, divs))

        return str(highest)

Pe012().main()
